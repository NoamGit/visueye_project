function [ handles, hObject ] = calc_qi(handles, hObject)
%calculates Quality index as it appears in ** Baden et al 2016

% load 1D data
contents = cellstr(get(hObject,'String'));
selection = contents{get(hObject,'Value')};
sc = table2array(handles.df.cell_table(:,selection)); % single cell
stim = handles.stimulus;
dt = 1/handles.df.properties.imaging_rate;
time = (0:dt:( handles.df.properties.signalLenght-1 ) * dt);
baseline = mean( sc.mcmc_samples.Cb );

% reshape signal according to reps
Ca = sc.C;
Spk = sc.S;
numReps = size(handles.stimPartition,2);
[C_mat, S_mat] = deal(cell(numReps,1));
CS_rsp = arrayfun(@(x,y) [Ca(x:y); Spk(x:y)],handles.stimPartition(1,:),...
    handles.stimPartition(2,:),'UniformOutput',false);

% find QI
min_length = min(diff(handles.stimPartition))+1;
E_rc = cell2mat(cellfun(@(x) (x(1,1:min(min_length)))',CS_rsp,...
    'UniformOutput',false));
V_tc = cellfun(@(x) var(x(1,:)),CS_rsp);
qi_C = var(mean(E_rc,2))/mean(V_tc);

% find QI
E_rs = cell2mat(cellfun(@(x) (x(2,1:min(min_length)))',CS_rsp,...
    'UniformOutput',false));
V_ts = cellfun(@(x) var(x(2,:)),CS_rsp);
qi_S = var(mean(E_rs,2))/mean(V_ts);

% find MI
[ mi ] = mutualInform( Spk, stim );

var_name = handles.df.cell_table(1,selection).Properties.VariableNames; 
temp_struct = table2array(handles.df.cell_table(:,var_name));
temp_struct.QI_ca = qi_C; temp_struct.QI_spk = qi_S;
handles.df.cell_table(:,var_name) = [];
handles.df.cell_table(:,var_name) = table(temp_struct,'VariableNames',var_name);

str_2_disp = ['ca - ',num2str(qi_C),'  spk - ',num2str(qi_S)];
set(handles.qi_TXT,'String',str_2_disp);
end

